{"version":3,"sources":["components/SideDrawer/DrawerToggle.js","components/Navbar/Navbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","img/bg.png","img/gh.png","img/li.png","App.js","serviceWorker.js","index.js"],"names":["drawerToggle","props","className","onClick","click","navbar","drawerHandler","href","sideDrawer","drawerClasses","show","backdrop","App","state","sideDrawerOpen","drawerToggleHandler","setState","prevState","backdropClickHandler","this","id","src","bg","alt","target","rel","gh","li","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAWeA,G,kBARM,SAAAC,GAAK,OACtB,4BAAQC,UAAU,eAAeC,QAASF,EAAMG,OAC5C,yBAAKF,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,wBCcRG,EAjBA,SAAAJ,GAAK,OAChB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAcE,MAAOH,EAAMK,iBAE/B,yBAAKJ,UAAU,WACX,4BACI,4BAAI,uBAAGK,KAAO,QAAV,aACJ,4BAAI,uBAAGA,KAAO,UAAV,UACJ,4BAAI,uBAAGA,KAAO,YAAV,iBCOTC,G,MAlBI,SAAAP,GACf,IAAIQ,EAAgB,aAMpB,OALGR,EAAMS,OAELD,EAAgB,mBAIpB,yBAAKP,UAAWO,GACZ,4BACI,4BAAI,uBAAGF,KAAO,QAAV,aACJ,4BAAI,uBAAGA,KAAO,UAAV,UACJ,4BAAI,uBAAGA,KAAO,YAAV,gBCRDI,G,MAJE,SAAAV,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAAUF,EAAMG,UCJ/B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BC2E1BQ,E,4MA/DbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,oBAAsB,WACpB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAgB,K,uDAI/B,IAAIH,EAKJ,OAHGQ,KAAKN,MAAMC,iBACZH,EAAW,kBAAC,EAAD,CAAUP,MAASe,KAAKD,wBAGnC,yBAAKhB,UAAU,OACb,8BACA,+CAIA,kBAAC,EAAD,CAAQI,cAAiBa,KAAKJ,sBAC9B,kBAAC,EAAD,CAAYL,KAAMS,KAAKN,MAAMC,iBAC5BH,EACD,8BACE,yBAAKT,UAAU,WACb,yBAAKkB,GAAG,KAAKC,IAAKC,EAAIC,IAAI,sFAC1B,yBAAKrB,UAAU,YACb,uBAAGA,UAAU,SAAb,uLAQN,yBAAKkB,GAAG,QAAQlB,UAAU,SACxB,yBAAKA,UAAU,QACb,uBAAGK,KAAK,oCAAoCiB,OAAO,SAASC,IAAI,uBAChE,yBAAKL,GAAG,OAAOC,IAAKK,EAAIH,IAAI,sDAE5B,uBAAGhB,KAAK,8CAA8CiB,OAAO,SAASC,IAAI,uBAC1E,yBAAKL,GAAG,OAAOC,IAAKM,EAAIJ,IAAI,4DAIhC,yBAAKH,GAAI,UAAUlB,UAAU,SAC3B,uBAAGA,UAAU,SAAb,yBACsB,2D,GAxDd0B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3150639d.chunk.js","sourcesContent":["import React from 'react';\nimport './DrawerToggle.css';\n\nconst drawerToggle = props => (\n    <button className=\"toggleButton\" onClick={props.click}>\n        <div className=\"toggleButtonLine\"/>\n        <div className=\"toggleButtonLine\"/>\n        <div className=\"toggleButtonLine\"/>\n    </button>\n);\n\nexport default drawerToggle;","import React from 'react';\nimport './Navbar.css';\nimport DrawerToggle from '../SideDrawer/DrawerToggle.js';\n\nconst navbar = props => (\n    <header className=\"navhead\">\n        <nav className=\"navbar\">\n            <div className=\"NavbarTog\">\n                <DrawerToggle click={props.drawerHandler}/> \n            </div>\n            <div className=\"navList\">\n                <ul>\n                    <li><a href = \"#top\">About Me</a></li>\n                    <li><a href = \"#links\">Links</a></li>\n                    <li><a href = \"#contact\">Contact</a></li>\n                </ul>\n            </div>\n        </nav>\n    </header>\n);\n\nexport default navbar;","import React from 'react';\nimport './SideDrawer.css';\n\nconst sideDrawer = props => {\n    let drawerClasses = 'sideDrawer';\n    if(props.show)\n    {\n        drawerClasses = 'sideDrawer open';\n    }\n\n    return(\n    <nav className={drawerClasses}>\n        <ul>\n            <li><a href = \"#top\">About Me</a></li>\n            <li><a href = \"#links\">Links</a></li>\n            <li><a href = \"#contact\">Contact</a></li>\n        </ul>\n    </nav>\n    );\n};\n\nexport default sideDrawer;","import React from 'react';\nimport './Backdrop.css';\n\nconst backdrop = props => (\n    <div className=\"backdrop\" onClick= {props.click}></div>\n);\n\nexport default backdrop;","export default __webpack_public_path__ + \"static/media/bg.875b91b1.png\";","export default __webpack_public_path__ + \"static/media/gh.bdc499b5.png\";","export default __webpack_public_path__ + \"static/media/li.7b620195.png\";","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar.js';\nimport SideDrawer from './components/SideDrawer/SideDrawer.js';\nimport Backdrop from './components/Backdrop/Backdrop.js';\nimport bg from './img/bg.png';\nimport gh from './img/gh.png';\nimport li from './img/li.png';\n\n\nclass App extends Component {\n\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleHandler = () => {\n    this.setState((prevState)=>{\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false});\n  };\n  \n  render(){\n    let backdrop;\n\n    if(this.state.sideDrawerOpen){\n      backdrop = <Backdrop click = {this.backdropClickHandler}/>\n    }\n    return (\n      <div className=\"App\">\n        <head>\n        <title>\n          Aman Oberoi\n        </title>\n      </head>\n        <Navbar drawerHandler = {this.drawerToggleHandler}/>\n        <SideDrawer show={this.state.sideDrawerOpen}/>\n        {backdrop}\n        <main>\n          <div className=\"aboutme\">\n            <img id=\"bg\" src={bg} alt=\"Photograph of the night sky over an isolated, illuminated fort in Udaipur, India.\"></img>\n            <div className=\"centered\">\n              <p className=\"intro\">\n                My name is Aman Oberoi and I am a sophomore studying computer science and math at UCLA. \n                My interests include algorithms, machine learning, software engineering and photography!\n              </p>\n            </div>\n          </div>\n        </main>\n        \n        <div id=\"links\" className=\"black\">\n          <div className=\"card\">\n            <a href=\"https://github.com/TheDarkLord247\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img id=\"logo\" src={gh} alt=\"GitHub logo containg a link to my GitHub profile\"></img>\n            </a>\n            <a href=\"https://www.linkedin.com/in/amanoberoi2001/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img id=\"logo\" src={li} alt=\"LinkedIn logo containg a link to my LinkedIn profile\"></img>\n            </a>\n          </div>\n        </div>\n        <div id =\"contact\" className=\"black\">\n          <p className=\"intro\">\n          You can contact me at <b>amanbir5103@gmail.com</b>\n          </p>\n        </div>\n          \n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}